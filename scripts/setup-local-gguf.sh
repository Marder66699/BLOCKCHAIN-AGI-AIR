#!/bin/bash

# AI ON BLOCKCHAIN - Local GGUF Setup Script
# Author: Sir Charles Spikes
# Contact: SirCharlesspikes5@gmail.com | Telegram: @SirGODSATANAGI

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
NODE_ID=${NODE_ID:-"local-gguf-node"}
FILEBASE_API_KEY=${FILEBASE_API_KEY:-""}
FILEBASE_API_SECRET=${FILEBASE_API_SECRET:-""}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP $1]${NC} $2"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."

    local missing_tools=()

    if ! command -v java &> /dev/null; then
        missing_tools+=("java")
    fi

    if ! command -v curl &> /dev/null; then
        missing_tools+=("curl")
    fi

    if ! command -v jq &> /dev/null; then
        missing_tools+=("jq")
    fi

    if [ ${#missing_tools[@]} -ne 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        log_info "Please install the missing tools and try again."
        exit 1
    fi

    log_success "All prerequisites found"
}

# Setup Filebase configuration
setup_filebase() {
    log_step "1" "Setting up Filebase configuration..."

    if [ -z "$FILEBASE_API_KEY" ] || [ -z "$FILEBASE_API_SECRET" ]; then
        log_warn "Filebase API credentials not provided"
        log_info "Please set the following environment variables:"
        echo "  export FILEBASE_API_KEY='your_api_key'"
        echo "  export FILEBASE_API_SECRET='your_api_secret'"
        echo ""
        log_info "Or create a Filebase account at: https://filebase.com"
        echo ""

        read -p "Do you want to continue without Filebase setup? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Exiting setup. Please configure Filebase and try again."
            exit 1
        fi
    else
        log_success "Filebase API credentials configured"
    fi

    # Test Filebase API
    if [ -n "$FILEBASE_API_KEY" ] && [ -n "$FILEBASE_API_SECRET" ]; then
        log_info "Testing Filebase API connection..."
        local auth=$(echo -n "$FILEBASE_API_KEY:$FILEBASE_API_SECRET" | base64)

        local response=$(curl -s -w "%{http_code}" \
            -H "Authorization: Basic $auth" \
            https://api.filebase.io/v1/buckets 2>/dev/null)

        local http_code=$(echo "$response" | tail -c 3)
        local body=$(echo "$response" | head -n -1)

        if [ "$http_code" = "200" ]; then
            log_success "Filebase API connection successful"
        else
            log_warn "Filebase API test failed (HTTP $http_code)"
            log_warn "Response: $body"
        fi
    fi
}

# Setup local directories
setup_directories() {
    log_step "2" "Setting up local directories..."

    mkdir -p "$PROJECT_ROOT/models"
    mkdir -p "$PROJECT_ROOT/uploads"
    mkdir -p "$PROJECT_ROOT/results"
    mkdir -p "$PROJECT_ROOT/logs"

    log_success "Directories created:"
    log_info "  Models: $PROJECT_ROOT/models"
    log_info "  Uploads: $PROJECT_ROOT/uploads"
    log_info "  Results: $PROJECT_ROOT/results"
    log_info "  Logs: $PROJECT_ROOT/logs"
}

# Configure application
configure_application() {
    log_step "3" "Configuring application..."

    # Create or update node.properties
    cat > "$PROJECT_ROOT/config/node.properties" << EOF
# Local GGUF Processor Configuration
# Generated by setup-local-gguf.sh

# Node Configuration
node.id=$NODE_ID
server.port=8081

# Ethereum Configuration
ethereum.rpc.url=http://localhost:8545
ethereum.private.key=\${AI_NODE_PRIVATE_KEY}

# Contract Addresses
contract.gguf.address=\${GGUF_PROCESSOR_CONTRACT_ADDRESS}

# Filebase Configuration
filebase.api.key=$FILEBASE_API_KEY
filebase.api.secret=$FILEBASE_API_SECRET
filebase.gateway=https://ipfs.filebase.io/ipfs/

# Local Directories
models.directory=./models
uploads.directory=./uploads
results.directory=./results

# Processing Configuration
max.concurrent.tasks=3
processing.timeout.seconds=300
models.cache.size=10

# Logging
logging.level=INFO
logging.file=./logs/gguf-processor.log

# Performance
cpu.threads=$(nproc 2>/dev/null || echo "4")
gpu.enabled=false
memory.limit.mb=4096
EOF

    log_success "Configuration created at: $PROJECT_ROOT/config/node.properties"
}

# Setup sample model (optional)
setup_sample_model() {
    log_step "4" "Setting up sample model..."

    echo ""
    log_info "Would you like to download a sample GGUF model?"
    log_info "This will help test the system (requires ~4GB disk space)"
    echo ""

    read -p "Download sample model? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Downloading sample Llama 2 7B Q4_0 model..."

        # Create download script
        cat > "$PROJECT_ROOT/download-sample-model.sh" << 'EOF'
#!/bin/bash
# Download sample GGUF model

MODEL_URL="https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGUF/resolve/main/llama-2-7b-chat.Q4_0.gguf"
MODEL_FILE="models/llama-2-7b-chat.Q4_0.gguf"

echo "Downloading sample model..."
echo "URL: $MODEL_URL"
echo "Destination: $MODEL_FILE"
echo ""

if [ -f "$MODEL_FILE" ]; then
    echo "Model already exists: $MODEL_FILE"
    exit 0
fi

mkdir -p models
curl -L -o "$MODEL_FILE" "$MODEL_URL"

if [ $? -eq 0 ]; then
    echo "Download completed successfully!"
    ls -lh "$MODEL_FILE"
else
    echo "Download failed!"
    exit 1
fi
EOF

        chmod +x "$PROJECT_ROOT/download-sample-model.sh"

        # Run download
        cd "$PROJECT_ROOT"
        ./download-sample-model.sh

        log_success "Sample model downloaded"
    else
        log_info "Skipping sample model download"
        log_info "You can download models later using:"
        log_info "  ./download-sample-model.sh"
    fi
}

# Test local processing
test_local_processing() {
    log_step "5" "Testing local processing setup..."

    log_info "Building Java application..."
    cd "$PROJECT_ROOT"

    # Build the application
    if [ -f "gradlew" ]; then
        ./gradlew build -q > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            log_success "Java application built successfully"
        else
            log_warn "Java build failed - you may need to fix dependencies"
        fi
    else
        log_warn "Gradle wrapper not found - you may need to build manually"
    fi

    # Test configuration loading
    log_info "Testing configuration..."
    if [ -f "config/node.properties" ]; then
        log_success "Configuration file exists"
    else
        log_error "Configuration file missing"
        exit 1
    fi
}

# Create helper scripts
create_helper_scripts() {
    log_step "6" "Creating helper scripts..."

    cd "$PROJECT_ROOT"

    # Start script
    cat > start-local-processor.sh << EOF
#!/bin/bash
# Start Local GGUF Processor

echo "Starting Local GGUF Processor..."
echo "Node ID: $NODE_ID"
echo ""

# Set environment variables
export AI_NODE_PRIVATE_KEY="\${AI_NODE_PRIVATE_KEY:-your_private_key_here}"
export GGUF_PROCESSOR_CONTRACT_ADDRESS="\${GGUF_PROCESSOR_CONTRACT_ADDRESS:-your_contract_address}"

# Start the processor
java -cp "\$(./gradlew -q printClasspath):build/libs/*" \\
    com.sircharlesspikes.ai.blockchain.LocalGGUFProcessor

echo ""
echo "Processor stopped."
EOF

    # Upload script
    cat > upload-model.sh << 'EOF'
#!/bin/bash
# Upload and register model

if [ $# -lt 1 ]; then
    echo "Usage: $0 <model-path> [model-type] [base-model] [quantization]"
    echo ""
    echo "Example:"
    echo "  $0 models/llama-2-7b-chat.Q4_0.gguf llama llama2 q4_0"
    exit 1
fi

MODEL_PATH=$1
MODEL_TYPE=${2:-"llama"}
BASE_MODEL=${3:-"llama2"}
QUANTIZATION=${4:-"q4_0"}

echo "Uploading model: $MODEL_PATH"
echo "Type: $MODEL_TYPE"
echo "Base: $BASE_MODEL"
echo "Quantization: $QUANTIZATION"
echo ""

# Set environment variables
export AI_NODE_PRIVATE_KEY="${AI_NODE_PRIVATE_KEY:-your_private_key_here}"
export GGUF_PROCESSOR_CONTRACT_ADDRESS="${GGUF_PROCESSOR_CONTRACT_ADDRESS:-your_contract_address}"

# Upload and register
java -cp "$(./gradlew -q printClasspath):build/libs/*" \
    com.sircharlesspikes.ai.blockchain.LocalGGUFProcessor \
    upload "$MODEL_PATH" "$MODEL_TYPE" "$BASE_MODEL" "$QUANTIZATION"
EOF

    # Submit request script
    cat > submit-request.sh << 'EOF'
#!/bin/bash
# Submit processing request

if [ $# -lt 3 ]; then
    echo "Usage: $0 <ipfs-hash> <prompt> <api-key>"
    echo ""
    echo "Example:"
    echo "  $0 QmYourModelHash \"Hello, how are you?\" your-api-key"
    exit 1
fi

IPFS_HASH=$1
PROMPT=$2
API_KEY=$3

echo "Submitting processing request..."
echo "IPFS Hash: $IPFS_HASH"
echo "API Key: $API_KEY"
echo "Prompt: $PROMPT"
echo ""

# Set environment variables
export AI_NODE_PRIVATE_KEY="${AI_NODE_PRIVATE_KEY:-your_private_key_here}"
export GGUF_PROCESSOR_CONTRACT_ADDRESS="${GGUF_PROCESSOR_CONTRACT_ADDRESS:-your_contract_address}"

# Submit request
java -cp "$(./gradlew -q printClasspath):build/libs/*" \
    com.sircharlesspikes.ai.blockchain.LocalGGUFProcessor \
    submit "$IPFS_HASH" "$PROMPT" "$API_KEY"
EOF

    # Status script
    cat > check-status.sh << 'EOF'
#!/bin/bash
# Check processor status

echo "Checking Local GGUF Processor status..."
echo ""

# Get status
java -cp "$(./gradlew -q printClasspath):build/libs/*" \
    com.sircharlesspikes.ai.blockchain.LocalGGUFProcessor \
    status
EOF

    # Make scripts executable
    chmod +x start-local-processor.sh upload-model.sh submit-request.sh check-status.sh

    log_success "Helper scripts created:"
    log_info "  • start-local-processor.sh - Start the processor"
    log_info "  • upload-model.sh - Upload and register models"
    log_info "  • submit-request.sh - Submit processing requests"
    log_info "  • check-status.sh - Check processor status"
}

# Display setup summary
display_summary() {
    log_step "7" "Setup Complete!"

    echo ""
    log_success "Local GGUF Processor setup completed!"
    echo ""
    log_info "Next steps:"
    echo ""
    log_info "1. Configure your environment:"
    echo "   export AI_NODE_PRIVATE_KEY='your_ethereum_private_key'"
    echo "   export GGUF_PROCESSOR_CONTRACT_ADDRESS='deployed_contract_address'"
    echo ""

    log_info "2. Start the processor:"
    echo "   ./start-local-processor.sh"
    echo ""

    log_info "3. Upload a model:"
    echo "   ./upload-model.sh models/your-model.gguf"
    echo ""

    log_info "4. Submit a request:"
    echo "   ./submit-request.sh <ipfs-hash> \"Your prompt\" <api-key>"
    echo ""

    log_info "5. Check status:"
    echo "   ./check-status.sh"
    echo ""

    log_info "Directories:"
    log_info "  • Models: $PROJECT_ROOT/models"
    log_info "  • Uploads: $PROJECT_ROOT/uploads"
    log_info "  • Results: $PROJECT_ROOT/results"
    log_info "  • Logs: $PROJECT_ROOT/logs"
    echo ""

    log_info "Configuration:"
    log_info "  • Node ID: $NODE_ID"
    log_info "  • Config file: $PROJECT_ROOT/config/node.properties"
    log_info "  • Filebase: $([ -n "$FILEBASE_API_KEY" ] && echo "Configured" || echo "Not configured")"
    echo ""

    log_info "For more information, see the README.md file"
}

# Main execution
main() {
    echo "==============================================="
    echo "🤖 AI ON BLOCKCHAIN - LOCAL GGUF SETUP"
    echo "By Sir Charles Spikes"
    echo "Cincinnati, Ohio"
    echo "==============================================="
    echo ""

    check_prerequisites
    setup_filebase
    setup_directories
    configure_application
    setup_sample_model
    test_local_processing
    create_helper_scripts
    display_summary

    log_success "Setup completed successfully! 🎉"
}

# Run main function
main "$@"
